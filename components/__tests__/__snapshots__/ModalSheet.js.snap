// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ModalSheet/> render the modal sheet and close on success 1`] = `
Array [
  <View
    accessible={true}
    focusable={true}
    isTVSelectable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {
          "backgroundColor": "#313d48",
          "borderRadius": 6,
          "minHeight": 40,
          "paddingHorizontal": 24,
          "paddingVertical": 16,
        },
        Object {
          "marginBottom": 16,
        },
      ]
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
        }
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 18,
              "textAlign": "center",
            },
            Object {},
          ]
        }
      >
        Join Group
      </Text>
    </View>
  </View>,
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    onSwipeComplete={[Function]}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeDirection="down"
    swipeThreshold={100}
    transparent={true}
    visible={false}
  >
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
    />
    <View
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      onSwipeComplete={[Function]}
      pointerEvents="box-none"
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
          "left": 0,
          "margin": 0,
          "top": 0,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeDirection="down"
      swipeThreshold={100}
    >
      <View
        style={
          Object {
            "backgroundColor": "#212931",
            "borderTopLeftRadius": 10,
            "borderTopRightRadius": 10,
            "height": "85%",
            "paddingBottom": 20,
            "paddingHorizontal": 16,
            "paddingTop": 10,
            "position": "relative",
          }
        }
      >
        <View
          style={
            Object {
              "alignSelf": "center",
              "backgroundColor": "rgba(255,255,255,0.3)",
              "borderRadius": 6,
              "height": 6,
              "marginBottom": 30,
              "width": 100,
            }
          }
        />
        <RCTScrollView
          contentContainerStyle={
            Object {
              "flexGrow": 1,
            }
          }
        >
          <View>
            <View>
              <Text>
                Join Echo Group
              </Text>
            </View>
          </View>
        </RCTScrollView>
      </View>
    </View>
  </Modal>,
]
`;

exports[`<ModalSheet/> render the modal sheet and close on success 2`] = `
Array [
  <View
    accessible={true}
    focusable={true}
    isTVSelectable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {
          "backgroundColor": "#313d48",
          "borderRadius": 6,
          "minHeight": 40,
          "paddingHorizontal": 24,
          "paddingVertical": 16,
        },
        Object {
          "marginBottom": 16,
        },
      ]
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
        }
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 18,
              "textAlign": "center",
            },
            Object {},
          ]
        }
      >
        Join Group
      </Text>
    </View>
  </View>,
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    onSwipeComplete={[Function]}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeDirection="down"
    swipeThreshold={100}
    transparent={true}
    visible={true}
  >
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
    />
    <View
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      onSwipeComplete={[Function]}
      pointerEvents="box-none"
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
          "left": 0,
          "margin": 0,
          "top": 0,
          "transform": Array [
            Object {
              "translateY": 1334,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeDirection="down"
      swipeThreshold={100}
    >
      <View
        style={
          Object {
            "backgroundColor": "#212931",
            "borderTopLeftRadius": 10,
            "borderTopRightRadius": 10,
            "height": "85%",
            "paddingBottom": 20,
            "paddingHorizontal": 16,
            "paddingTop": 10,
            "position": "relative",
          }
        }
      >
        <View
          style={
            Object {
              "alignSelf": "center",
              "backgroundColor": "rgba(255,255,255,0.3)",
              "borderRadius": 6,
              "height": 6,
              "marginBottom": 30,
              "width": 100,
            }
          }
        />
        <RCTScrollView
          contentContainerStyle={
            Object {
              "flexGrow": 1,
            }
          }
        >
          <View>
            <View>
              <Text>
                Join Echo Group
              </Text>
            </View>
          </View>
        </RCTScrollView>
      </View>
    </View>
  </Modal>,
]
`;

exports[`<ModalSheet/> render the modal sheet and close on success 3`] = `
Array [
  <View
    accessible={true}
    focusable={true}
    isTVSelectable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {
          "backgroundColor": "#313d48",
          "borderRadius": 6,
          "minHeight": 40,
          "paddingHorizontal": 24,
          "paddingVertical": 16,
        },
        Object {
          "marginBottom": 16,
        },
      ]
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
        }
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 18,
              "textAlign": "center",
            },
            Object {},
          ]
        }
      >
        Join Group
      </Text>
    </View>
  </View>,
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    onSwipeComplete={[Function]}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeDirection="down"
    swipeThreshold={100}
    transparent={true}
    visible={true}
  >
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
    />
    <View
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      onSwipeComplete={[Function]}
      pointerEvents="box-none"
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
          "left": 0,
          "margin": 0,
          "top": 0,
          "transform": Array [
            Object {
              "translateY": 1334,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeDirection="down"
      swipeThreshold={100}
    >
      <View
        style={
          Object {
            "backgroundColor": "#212931",
            "borderTopLeftRadius": 10,
            "borderTopRightRadius": 10,
            "height": "85%",
            "paddingBottom": 20,
            "paddingHorizontal": 16,
            "paddingTop": 10,
            "position": "relative",
          }
        }
      >
        <View
          style={
            Object {
              "alignSelf": "center",
              "backgroundColor": "rgba(255,255,255,0.3)",
              "borderRadius": 6,
              "height": 6,
              "marginBottom": 30,
              "width": 100,
            }
          }
        />
        <RCTScrollView
          contentContainerStyle={
            Object {
              "flexGrow": 1,
            }
          }
        >
          <View>
            <View>
              <Text>
                Join Echo Group
              </Text>
            </View>
          </View>
        </RCTScrollView>
      </View>
    </View>
  </Modal>,
]
`;

exports[`<ModalSheet/> render the modal sheet with defaults 1`] = `
Array [
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "#313d48",
          "borderRadius": 30,
          "justifyContent": "center",
          "minHeight": 60,
          "paddingHorizontal": 16,
          "paddingVertical": 12,
        },
        Object {
          "marginBottom": 16,
        },
      ]
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
        }
      }
    >
      <Text
        selectable={true}
        style={
          Array [
            Object {
              "color": "#cbd2d6",
              "fontFamily": "NunitoSans-Regular",
              "fontSize": 18,
              "lineHeight": 24,
              "textAlign": "auto",
            },
            Array [
              Object {
                "color": "#fff",
                "textAlign": "center",
              },
              Object {},
            ],
          ]
        }
      >
        🚨 needs a title 🚨
      </Text>
    </View>
  </View>,
  <Modal
    animationType="none"
    deviceHeight={null}
    deviceWidth={null}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    onSwipeComplete={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={false}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeDirection="down"
    swipeThreshold={100}
    transparent={true}
    visible={false}
  >
    <View
      accessible={true}
      focusable={true}
      forwardedRef={[Function]}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
    />
    <View
      deviceHeight={null}
      deviceWidth={null}
      forwardedRef={[Function]}
      hideModalContentWhileAnimating={false}
      onBackdropPress={[Function]}
      onModalHide={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      onSwipeComplete={[Function]}
      panResponderThreshold={4}
      pointerEvents="box-none"
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      statusBarTranslucent={false}
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
          "left": 0,
          "margin": 0,
          "top": 0,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeDirection="down"
      swipeThreshold={100}
    >
      <View
        onLayout={[Function]}
        style={
          Array [
            Object {
              "backgroundColor": "#212931",
              "borderTopLeftRadius": 10,
              "borderTopRightRadius": 10,
              "height": "85%",
              "paddingBottom": 20,
              "paddingTop": 10,
              "position": "relative",
            },
            Object {
              "paddingBottom": 0,
            },
          ]
        }
      >
        <View
          style={
            Object {
              "alignSelf": "center",
              "backgroundColor": "rgba(255,255,255,0.3)",
              "borderRadius": 6,
              "height": 6,
              "marginBottom": 30,
              "width": 100,
            }
          }
        />
        <RCTScrollView
          contentContainerStyle={
            Object {
              "flexGrow": 1,
            }
          }
        >
          <View />
        </RCTScrollView>
      </View>
    </View>
  </Modal>,
]
`;
